const asyncHandler = require("express-async-handler")
require("dotenv").config()
const { connectDB, disconnectDB } = require("../config/db")
const User = require("../model/user.model")
const Pass = require("../model/pass.model")

//@desc Generate a pass by user
//@route POST /users/generatePass
const generatePass = asyncHandler(async (req, res) => {
  try {
    await connectDB()
    const { name, email, phone, duration, start } = req.body

    const user = await User.findOne({ _id: req.user._id })
    if (user) {
      if (user.role == "admin") {
        // console.log(user);
        const newPass = await Pass.create({
          name,
          phone,
          email,
          duration,
          start,
          checkInStatus: true,
          generateId: user.id,
          userName: req.user.name,
        })
        if (newPass) {
          res.status(201).json({
            success: true,
            newPass: newPass,
            message: "Pass generated successfully",
          })
        }
      } else {
        throw new Error("You are not authorised to create Pass!")
      }
    } else {
      throw new Error("Signup to create Pass!")
    }
  } catch (err) {
    console.log(err)
    res.status(400).json(err?.message)
  }
})

//@desc View all passes generated by a user
//@route Get /users/viewPasses
const viewPasses = asyncHandler(async (req, res) => {
  try {
    await connectDB()
    const user = await User.findById(req.user._id)
    // console.log(user.id)

    const passes = await Pass.find({ generateId: user.id })

    // console.log(passes)
    if (passes.length > 0) {
      res.status(201).json({
        success: true,
        passes: passes,
        message: "Passes fetched successfully",
      })
    } else if (passes.length < 1) {
      throw new Error("No passes found")
    }
  } catch (err) {
    console.log(err)
    res.status(400).json(err?.message)
  }
})

//@desc Verify pass by gaurd
//@route PUT /users/verifyPass
const verifyPass = asyncHandler(async (req, res) => {
  try {
    await connectDB()
    const user = await User.findById(req.user._id)
    console.log(req.params._id)

    if (user.role == "gaurd") {
      const passVerified = await Pass.findOneAndUpdate(
        { _id: req.params._id },
        {
          checkInStatus: true,
          timestamps: Date.now(),
        }
      )
      console.log(passVerified)
      if (passVerified) {
        res.status(201).json({
          success: true,
          passVerified: passVerified,
          message: "Pass verified successfully",
        })
      } else {
        throw new Error("Something went wrong")
      }
    } else {
      throw new Error("You are not authorised to verify!")
    }
  } catch (err) {
    console.error(err)
    res.status(400).json(err?.message)
  }
})

module.exports = { generatePass, viewPasses, verifyPass }
